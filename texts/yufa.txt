R0		E->subs
R12		subs->\e
R13		subs->sub id ( subv ) { stmts } subs
R73		subs->no_overload sub id ( subv ) { stmts } subs
R74		subs->sub id ( subv ) no_overload { stmts } subs
R14		subv->\e
R15		subv->type id
R16		subv->type id , subv
R1		stmts->stmt stmts
R3		stmts->\e
R4	id2	stmt->expr ;
R5	id3	stmt->type vdecl ;
R6		stmt->id :
R7	id5	stmt->if ( expr ) stmt
R18	id4	stmt->if ( expr ) stmt else stmt
R8	id6	stmt->while ( expr ) stmt
R9	id7	stmt->for ( exprf ) stmt
R10	id8	stmt->goto id ;
R11	id9	stmt->{ stmts }
R19	id10	stmt->break ;
R20	id11	stmt->continue ;
R21	id29	stmt->thread id ( insv ) ;
R22	id30	stmt->do stmt while ( expr ) ;
R23	id31	stmt->__rawins { data }
R32		vdecl->id
R33		vdecl->id = inif
R34		vdecl->id , vdecl
R35		vdecl->id = inif , vdecl
R36	id19	insv->exprf
R37		insv->exprf , insv
R38	id19	insv->\e
R24	id14	inif->ini
R25	id15	inif->ini : ini : ini : ini
R26	id16	ini->expr
R27	id17c	ini->{ inia }
R28		inia->expr , inia
R29	id12	inia->expr
R30	id20	exprf->expr
R31	id21	exprf->expr : expr : expr : expr
R39	id22	expr->id
R40	id23	expr->num
R41	id26	expr->expr || expr
R42	id26	expr->expr && expr
R43	id26	expr->expr or expr
R44	id26	expr->expr and expr
R45	id26	expr->expr | expr
R46	id26	expr->expr ^ expr
R47	id26	expr->expr & expr
R48	id26	expr->expr == expr
R49	id26	expr->expr != expr
R50	id26	expr->expr > expr
R51	id26	expr->expr >= expr
R52	id26	expr->expr < expr
R53	id26	expr->expr <= expr
R54	id26	expr->expr + expr
R55	id26	expr->expr - expr
R56	id26	expr->expr * expr
R57	id26	expr->expr / expr
R58	id26	expr->expr \% expr
R59	id25	expr->(-) expr
R60	id25	expr->! expr
R61	id26	expr->expr . expr
R62	id_expr	expr->( expr )
R63	id24	expr->id ( insv )//call
R63	id34	expr->id ( insv )//ins
R63	id35	expr->id ( insv )//mode
R63	id36	expr->id ( insv )//internal func
R64	id25	expr->(*) expr
R65	id25	expr->(&) expr
R66	id27	expr->expr [ expr ]
R67	id26	expr->expr as_op exprf
R68	id28	expr->( type ) expr
R69	id32	data->\e
R70		data->{ insdata } ; data
R71	id33	insdata->\e
R72		insdata->num insdata

FOLLOW
E	$
subs	$
subv	)
subva	)
stmts	$ }
stmt	$ id num type if else while for goto break continue { } op1 ( thread do __rawins
inif	; ,
ini	; , :
inia	}
exprf	) , ;
expr	) : , ; } op2 [ ] = as_op
vdecl	;
insv	)
data	}
insdata	}


FIRST
E	
subs	
subv	
stmts	\e id type if while for goto {
stmt	id type if while for goto {
inif	expr {
ini	expr {
inia	\e ,
exprf	expr
vdecl	id
insv	\e expr

72 79 128 129 130 151


I255:
E->subs\.
I0:
E->\.subs
subs->\.
subs->\.sub id ( subv ) { stmts } subs
subs->\.no_overload sub id ( subv ) { stmts } subs
subs->\.sub id ( subv ) no_overload { stmts } subs
I0---sub id (--->I61(I34 I35)
  ---no_overload sub id (--->I24(I65 I66 I67)
  ---subs------->I255
I9:
subs->sub id ( subv ) {\.stmts } subs
stmts->\.stmt stmts
stmts->\.
stmt->\.expr ;
stmt->\.type vdecl ;
stmt->\.if ( expr ) stmt
stmt->\.if ( expr ) stmt else stmt
stmt->\.while ( expr ) stmt
stmt->\.for ( exprf ) stmt
stmt->\.goto id ;
stmt->\.break ;
stmt->\.continue ;
stmt->\.thread id ( insv ) ;
stmt->\.do stmt while ( expr ) ;
stmt->\.__rawins { data }
stmt->\.id :
stmt->\.{ stmts }
expr->\.id
expr->\.num
expr->\.expr || expr
expr->\.expr && expr
expr->\.expr or expr
expr->\.expr and expr
expr->\.expr | expr
expr->\.expr ^ expr
expr->\.expr & expr
expr->\.expr == expr
expr->\.expr != expr
expr->\.expr > expr
expr->\.expr >= expr
expr->\.expr < expr
expr->\.expr <= expr
expr->\.expr + expr
expr->\.expr - expr
expr->\.expr * expr
expr->\.expr / expr
expr->\.expr \% expr
expr->\.(-) expr
expr->\.! expr
expr->\.expr . expr
expr->\.( expr )
expr->\.id ( insv )
expr->\.(*) expr
expr->\.(&) expr
expr->\.expr [ expr ]
expr->\.expr as_op exprf
I9---id----------->I1
  ---num---------->I44
  ---type--------->I2
  ---if(---------->I3(I98)
  ---while(------->I4(I99)
  ---for(--------->I5(I100)
  ---goto id ;---->I6(I124 I125)
  ---break ;------>I96(I126)
  ---continue ;--->I97(I127)
  ---thread id (-->I156(I154 I155)
  ---do----------->I160
  ---__rawins {--->I168(I167)
  ---{------------>I77
  ---(-)---------->I82
  ---!------------>I83
  ---(------------>I84
  ---(*)---------->I85
  ---(&)---------->I86
  ---stmt--------->I7
  ---stmts-------->I49
  ---expr--------->I87
I1:
stmt->id\.:
expr->id\.
expr->id\.( insv )
I1---:------------>I8
  ---(------------>I10
I2:
stmt->type\.vdecl ;
vdecl->\.id
vdecl->\.id = inif
vdecl->\.id , vdecl
vdecl->\.id = inif , vdecl
I2---id----------->I11
  ---vdecl-------->I12
I3:
stmt->if (\.expr ) stmt
stmt->if (\.expr ) stmt else stmt
\.expr
I3---same---I82
  ---expr--------->I13
I4:
stmt->while (\.expr ) stmt
\.expr
I4---same---I82
  ---expr--------->I14
I5:
stmt->for(\.exprf ) stmt
exprf->\.expr
exprf->\.expr : expr : expr : expr
\.expr
I5---same---I82
  ---expr--------->I15
  ---exprf-------->I16
I6:
stmt->goto id ;\.
I7:
stmts->stmt\.stmts
\.stmts
\.stmt
\.expr
I7---same---I0
  ---stmt--------->I7
  ---stmts-------->I17
  ---expr--------->I87
I77:
stmt->{\.stmts }
\.stmts
\.stmt
\.expr
I77---same---I0
   ---stmt-------->I7
   ---stmts------->I78
   ---expr-------->I87
I8:
stmt->id :\.
I10:
expr->id (\.insv )
insv->\.exprf
insv->\.exprf , insv
insv->\.
exprf->\.expr
exprf->\.expr : expr : expr : expr
\.expr
I10---same---I3
   ---expr---------->I15
   ---exprf--------->I42
   ---insv---------->I46
I11:
vdecl->id\.
vdecl->id\. = inif
vdecl->id\. , vdecl
vdecl->id\. = inif , vdecl
I11---,------------->I59
   ---=------------->I53
I59:
vdecl->id ,\.vdecl
vdecl->\.id
vdecl->\.id = inif
vdecl->\.id , vdecl
vdecl->\.id = inif , vdecl
I59---id------------>I11
   ---vdecl--------->I48
I48:
vdecl->id , vdecl\.
I12:
stmt->type vdecl\.;
I12---;------------->I57
I13:
stmt->if ( expr\.) stmt
stmt->if ( expr\.) stmt else stmt
expr\.
I13---op---I87
   ---)------------->I58
I14:
stmt->while ( expr\.) stmt
expr\.
I14---op---I87
   ---)------------->I73
I15:
exprf->expr\.
exprf->expr\.: expr : expr : expr
expr\.
I15---op---I87
   ---:------------->I36
I16:
stmt->for( exprf\.) stmt
I16---)------------->I75
I17:
stmts->stmt stmts\.
I18:
stmts->id : stmt stmts\.
I19:
ini->expr\.
expr\.
I19---op---I87
I20:
ini->{\.inia }
inia->\.expr , inia
inia->\.expr
\.expr
I20---same---I82
   ---expr---------->I22
   ---inia---------->
I21:
inif->ini\.
inif->ini\.: ini : ini : ini
I21---:------------->I28
I22:
inia->expr\., inia
inia->expr\.
expr\.
I22---op---I87
   ---,-------------->I23
I23:
inia->expr ,\.inia
inia->\.expr , inia
inia->\.expr
\.expr
I23---same---I3
   ---expr----------->I22
   ---inia----------->I25
I25:
inia->expr , inia\.
I26:
ini->{ inia\.}
I26---}-------------->I27
I27:
ini->{ expr inia }\.
I28:
inif->ini :\.ini : ini : ini
ini->\.expr
ini->\.{ expr inia }
\.expr
I28---same---I3
   ---{-------------->I20
   ---expr----------->I19
   ---ini------------>I29
I29:
inif->ini : ini\.: ini : ini
I29---:-------------->I30
I30:
inif->ini : ini :\.ini : ini
ini->\.expr
ini->\.{ expr inia }
\.expr
I30---same---I3
   ---expr----------->I19
   ---{-------------->I20
   ---ini------------>I31
I31:
inif->ini : ini : ini\.: ini
I31---:-------------->I32
I32:
inif->ini : ini : ini :\.ini
ini->\.expr
ini->\.{ expr inia }
\.expr
I32---same---I3
   ---expr----------->I19
   ---{-------------->I20
   ---ini------------>I33
I33:
inif->ini : ini : ini : ini\.
I36:
exprf->expr :\.expr : expr : expr
\.expr
I36---same---I3
   ---expr----------->I37
I37:
exprf->expr : expr\.: expr : expr
expr\.
I37---op---I87
   ---:-------------->I38
I38:
exprf->expr : expr :\.expr : expr
\.expr
I38---expr----------->I39
I39:
exprf->expr : expr : expr\.: expr
expr\.
I39---op---I87
   ---:-------------->I40
I40:
exprf->expr : expr : expr :\.expr
\.expr
I40---expr----------->I41
I41:
exprf->expr : expr : expr : expr\.
expr\.
I41---op---I87
I42:
insv->exprf\.
insv->exprf\., insv
I42---,-------------->I43
I43:
insv->exprf ,\.insv
insv->\.exprf insva
insv->\.exprf , insv
insv->\.
exprf->\.expr
exprf->\.expr : expr : expr : expr
\.expr
I43---same---I3/I10
   ---expr----------->I15
   ---exprf---------->I42
   ---insv----------->I45
I44:
expr->num\.
I45:
insv->exprf , insv\.
I46:
expr->id ( insv\.)
I46---)------------>I47
I47:
expr->id ( insv )\.
I49:
subs->sub id ( subv ) { stmts\.} subs
I49---}------------>I50
I50:
subs->sub id ( subv ) { stmts }\.subs
subs->\.
subs->\.sub id ( subv ) { stmts } subs
subs->\.no_overload sub id ( subv ) { stmts } subs
subs->\.sub id ( subv ) no_overload { stmts } subs
I50---sub id (-->I61(I34 I35)
   ---subs------>I51
   ---same---I0
I51:
subs->sub id ( subv ) { stmts } subs\.
I53:
vdecl->id =\.inif
vdecl->id =\.inif , vdecl
inif->\.ini
inif->\.ini : ini : ini : ini
ini->\.expr
ini->\.{ expr inia }
\.expr
I53---same---I3/I28
   ---{----------->I20
   ---expr-------->I19
   ---ini--------->I21
   ---inif-------->I80
I80:
vdecl->id = inif\.
vdecl->id = inif\., vdecl
I80---,----------->I54
I54:
vdecl->id = inif ,\.vdecl
vdecl->\.id
vdecl->\.id = inif
vdecl->\.id , vdecl
vdecl->\.id = inif , vdecl
I54---id-------->I11
   ---vdecl----->I55
I55:
vdecl->id = inif , vdecl\.
I57:
stmt->type vdecl ;\.
I58:
stmt->if ( expr )\.stmt
stmt->if ( expr )\.stmt else stmt
\.stmt
\.expr
I58---same---I58
   ---stmt--------->I60
   ---expr--------->I87
I60:
stmt->if ( expr ) stmt\.
stmt->if ( expr ) stmt\.else stmt
I60---else------->I70
I61:
subs->sub id (\.subv ) { stmts } subs
subs->sub id (\.subv ) no_overload { stmts } subs
subv->\.
subv->\.type id
subv->\.type id , subv
I61---type------->I62
   ---subv------->I69
I24:
subs->no_overload sub id (\.subv ) { stmts } subs
\.subv
I24---type-------->I62
   ---subv-------->I52
I52:
subs->no_overload sub id ( subv\.) { stmts } subs
I52---) {--------->I179(I178)
I62:
subv->type\.id
subv->type\.id , subv
I62---id--------->I63
I63:
subv->type id\.
subv->type id\., subv
I63---,---------->I64
I64:
subv->type id ,\.subv
subv->\.
subv->\.type id
subv->\.type id , subv
I64---type------->I62
   ---subv------->I68
I68:
subv->type id , subv\.
I69:
subs->sub id ( subv\.) { stmts } subs
subs->sub id ( subv\.) no_overload { stmts } subs
I69---) {-------->I9(I56)
   ---) no_overload {--->I184(I56 I183)
I70:
stmt->if ( expr ) stmt else\.stmt
\.stmt
\.expr
I70---same---I58
   ---expr--------->I87
   ---stmt--------->I71
I71:
stmt->if ( expr ) stmt else stmt\.
I73:
stmt->while ( expr )\.stmt
\.stmt
\.expr
I73---same---I58
   ---expr--------->I87
   ---stmt--------->I74
I74:
stmt->while ( expr ) stmt\.
I75:
stmt->for ( exprf )\.stmt
\.stmt
\.expr
I75---same---I58
   ---expr--------->I87
   ---stmt--------->I76
I76:
stmt->for ( exprf ) stmt\.
I78:
stmt->{ stmts\.}
I78---}------------>I81
I81:
stmt->{ stmts }\.
I82:
expr->(-)\.expr
\.expr
I82---id----------->I94
   ---num---------->I44
   ---(-)---------->I82
   ---!------------>I83
   ---(------------>I84
   ---(*)---------->I85
   ---(&)---------->I87
   ---expr--------->I88
I83:
expr->!\.expr
\.expr
I83---same---I82
   ---expr--------->I89
I84:
expr->(\.expr )
expr->(\.type ) expr
\.expr
I84---same---I82
   ---expr--------->I92
   ---type--------->I151
I85:
expr->(*)\.expr
\.expr
I85---same---I82
   ---expr--------->I90
I86:
expr->(&)\.expr
\.expr
I86---same---I82
   ---expr--------->I91
I87:
stmt->expr\.;
expr->expr\.|| expr
expr->expr\.&& expr
expr->expr\.or expr
expr->expr\.and expr
expr->expr\.| expr
expr->expr\.^ expr
expr->expr\.& expr
expr->expr\.== expr
expr->expr\.!= expr
expr->expr\.> expr
expr->expr\.>= expr
expr->expr\.< expr
expr->expr\.<= expr
expr->expr\.+ expr
expr->expr\.- expr
expr->expr\.* expr
expr->expr\./ expr
expr->expr\.\% expr
expr->expr\.. expr
expr->expr\.[ expr ]
expr->expr\.as_op exprf
I87---||----------->I101
   ---&&----------->I102
   ---or----------->I103
   ---and---------->I104
   ---|------------>I105
   ---^------------>I106
   ---&------------>I107
   ---==----------->I108
   ---!=----------->I109
   ---\>------------>I110
   ---\>=----------->I111
   ---<------------>I112
   ---<=----------->I113
   ---+------------>I114
   ---\------------->I115
   ---*------------>I116
   ---/------------>I117
   ---\%------------>I118
   ---.------------>I119
   ---[------------>I120
   ---as_op-------->I121
   %---;------------>%I95
I88:
expr->(-) expr\.
expr\.
I88---op---I87
I89:
expr->! expr\.
expr\.
I89---op---I87
I90:
expr->(*) expr\.
expr\.
I90---op---I87
I91:
expr->(&) expr\.
expr\.
I91---op---I87
I92:
expr->( expr\.)
expr\.
I92---op---I87
   ---)------------>I93
I93:
expr->( expr )\.
I94:
expr->id\.
expr->id\.( insv )
I94---(------------>I10
I95:
stmt->expr ;\.
I96:
stmt->break ;\.
I97:
stmt->continue ;\.
I101:
expr->expr ||\.expr
\.expr
I101---same---I82
    ---expr-------->I131
I102:
expr->expr &&\.expr
\.expr
I102---same---I82
    ---expr-------->I132
I103:
expr->expr or\.expr
\.expr
I103---same---I82
    ---expr-------->I133
I104:
expr->expr and\.expr
\.expr
I104---same---I82
    ---expr-------->I134
I105:
expr->expr |\.expr
\.expr
I105---same---I82
    ---expr-------->I135
I106:
expr->expr ^\.expr
\.expr
I106---same---I82
    ---expr-------->I136
I107:
expr->expr &\.expr
\.expr
I107---same---I82
    ---expr-------->I137
I108:
expr->expr ==\.expr
\.expr
I108---same---I82
    ---expr-------->I138
I109:
expr->expr !=\.expr
\.expr
I109---same---I82
    ---expr-------->I139
I110:
expr->expr >\.expr
\.expr
I110---same---I82
    ---expr-------->I140
I111:
expr->expr >=\.expr
\.expr
I111---same---I82
    ---expr-------->I141
I112:
expr->expr <\.expr
\.expr
I112---same---I82
    ---expr-------->I142
I113:
expr->expr <=\.expr
\.expr
I113---same---I82
    ---expr-------->I143
I114:
expr->expr +\.expr
\.expr
I114---same---I82
    ---expr-------->I144
I115:
expr->expr -\.expr
\.expr
I115---same---I82
    ---expr-------->I145
I116:
expr->expr *\.expr
\.expr
I116---same---I82
    ---expr-------->I146
I117:
expr->expr /\.expr
\.expr
I117---same---I82
    ---expr-------->I147
I118:
expr->expr \%\.expr
\.expr
I118---same---I82
    ---expr-------->I148
I119:
expr->expr .\.expr
\.expr
I119---same---I82
    ---expr-------->I149
I120:
expr->expr [\.expr ]
\.expr
I120---same---I82
    ---expr-------->I150
I121:
expr->expr as_op\.exprf
\.exprf
\.expr
I121---same---I82
    ---expr-------->I15
    ---exprf------->I122
I122:
expr->expr as_op exprf\.
I123:
expr->expr [ expr ]\.
I131:
expr->expr || expr\.
expr\.
I131---op---I87
I132:
expr->expr && expr\.
expr\.
I132---op---I87
I133:
expr->expr or expr\.
expr\.
I133---op---I87
I134:
expr->expr and expr\.
expr\.
I134---op---I87
I135:
expr->expr | expr\.
expr\.
I135---op---I87
I136:
expr->expr ^ expr\.
expr\.
I136---op---I87
I137:
expr->expr & expr\.
expr\.
I137---op---I87
I138:
expr->expr == expr\.
expr\.
I138---op---I87
I139:
expr->expr != expr\.
expr\.
I139---op---I87
I140:
expr->expr > expr\.
expr\.
I140---op---I87
I141:
expr->expr >= expr\.
expr\.
I141---op---I87
I142:
expr->expr < expr\.
expr\.
I142---op---I87
I143:
expr->expr <= expr\.
expr\.
I143---op---I87
I144:
expr->expr + expr\.
expr\.
I144---op---I87
I145:
expr->expr - expr\.
expr\.
I145---op---I87
I146:
expr->expr * expr\.
expr\.
I146---op---I87
I147:
expr->expr / expr\.
expr\.
I147---op---I87
I148:
expr->expr \% expr\.
expr\.
I148---op---I87
I149:
expr->expr . expr\.
expr\.
I149---op---I87
I150:
expr->expr [ expr\.]
expr\.
I150---op---I87
    ---]-------->I123
I151:
expr->( type\.) expr
I151---)-------->I152
I152:
expr->( type )\.expr
\.expr
I152---same---I82
    ---expr----->I153
I153:
expr->( type ) expr\.
expr\.
I153---op---I87
I156:
stmt->thread id (\.insv ) ;
insv->\.exprf
insv->\.exprf , insv
insv->\.
\.exprf
\.expr
I156---same---I3
    ---expr------->I15
    ---exprf------>I42
    ---insv------->I157
I157:
stmt->thread id ( insv\.) ;
I157---) ;-------->I159(I158)
I159:
stmt->thread id ( insv ) ;\.
I160:
stmt->do\.stmt while ( expr ) ;
\.stmt
\.expr
I160---same---I58
    ---expr--------->I87
    ---stmt--------->I161
I161:
stmt->do stmt\.while ( expr ) ;
I161---while (------>I163(I162)
I163:
stmt->do stmt while (\.expr ) ;
I163---same---I3
    ---expr--------->I164
I164---) ;---------->I166(I165)
I168:
stmt->__rawins {\.data }
data->\.
data->\.{ insdata } ; data
I168---{------------>I169
    ---data--------->I170
I169:
data->{\.insdata } ; data
insdata->\.
insdata->\.num insdata
I169---num---------->I172
    ---insdata------>I173
I170:
stmt->__rawins { data\.}
I170---}------------>I171
I172:
insdata->num\.insdata
insdata->\.
insdata->\.num insdata
I172---num---------->I172
    ---insdata------>I174
I173:
data->{ insdata\.} ; data
I173---} ;---------->I176(I175)
I174:
insdata->num insdata\.
I176:
data->{ insdata } ;\.data
\.data
I176---same---I168
    ---data---I177
I177:
data->{ insdata } ; data\.
I179:
subs->no_overload sub id ( subv ) {\.stmts } subs
I180:
subs->no_overload sub id ( subv ) { stmts\.} subs
I181:
subs->no_overload sub id ( subv ) { stmts }\.subs
I182:
subs->no_overload sub id ( subv ) { stmts } subs\.
I183:
subs->sub id ( subv ) no_overload\.{ stmts } subs
I184:
subs->sub id ( subv ) no_overload {\.stmts } subs
I185:
subs->sub id ( subv ) no_overload { stmts\.} subs
I186:
subs->sub id ( subv ) no_overload { stmts }\.subs
I187:
subs->sub id ( subv ) no_overload { stmts } subs\.






Grammar error
-1  :Unexpected TOKEN, expect sub declare
-2  :Unexpected TOKEN, expect parameter list
-3  :Missing type specifier
-4  :Missing parameter name
-5  :Unexpected TOKEN, unclosed braket
-6  :Unexpected TOKEN, expect code block begin
-7  :Missing label name
-8  :Blank statement not allowed
-10 :Unclosed big braket
-11 :Unexpected TOKEN, probably missing identifier
-12 :Nesting sub declare not allowed
-13 :Floating else without if
-14 :Missing Operator
-16 :Please don't use keyword TOKEN
-17 :Unexpected TOKEN, we don't know what you want to do
-18 :Missing semicolon
-19 :Redundant TOKEN
-20 :Label at block's end not allowed
-21 :Can't declare non-variable
-22 :Unbalanced braket
-24 :Missing comma
-25 :Missing assignment sign
-26 :Can't use TOKEN for variable initialize
-27 :Can't declare array! (At least for this version of MUAECL)
-28 :Can't use difficulty switch inside if or while
-29 :Unexpected TOKEN, expect code block end
-30 :Unexpected TOKEN in initializer list
-31 :Unexpected TOKEN, expect initializer list end
-32 :Difficulty switch need to have four expression
-33 :Unexpected TOKEN, expect left small braket
-34 :Unexpected TOKEN, expect file end
-35 :Unexpected TOKEN, expect while
-36 :Unexpected TOKEN, expect left big braket
-37 :Unexpected TOKEN, expect raw data

-255:Design error



case -1: id = "Unexpected " + tokenName + ", expect sub declare."; break;
case -2: id = "Unexpected " + tokenName + ", expect parameter list."; break;
case -3: id = "Missing type specifier."; break;
case -4: id = "Missing parameter name."; break;
case -5: id = "Unexpected " + tokenName + ", unclosed braket."; break;
case -6: id = "Unexpected " + tokenName + ", expect code block begin."; break;
case -7: id = "Missing label name."; break;
case -8: id = "Blank statement not allowed."; break;
case -10: id = "Unclosed big braket."; break;
case -11: id = "Unexpected " + tokenName + ", probably missing identifier."; break;
case -12: id = "Nesting sub declare not allowed."; break;
case -13: id = "Floating else without if."; break;
case -14: id = "Missing Operator."; break;
case -16: id = "Please don't use keyword " + tokenName + "."; break;
case -17: id = "Unexpected " + tokenName + ", we don't know what you want to do."; break;
case -18: id = "Missing semicolon."; break;
case -19: id = "Redundant " + tokenName + "."; break;
case -20: id = "Label at block's end not allowed."; break;
case -21: id = "Can't declare non-variable."; break;
case -22: id = "Unbalanced braket."; break;
case -24: id = "Missing comma."; break;
case -25: id = "Missing assignment sign."; break;
case -26: id = "Can't use " + tokenName + " for variable initialize."; break;
case -27: id = "Can't declare array! (At least for this version of MUAECL)."; break;
case -28: id = "Can't use difficulty switch inside if or while."; break;
case -29: id = "Unexpected " + tokenName + ", expect code block end."; break;
case -30: id = "Unexpected " + tokenName + " in initializer list."; break;
case -31: id = "Unexpected " + tokenName + ", expect initializer list end."; break;
case -32: id = "Difficulty switch need to have four expression."; break;
case -33: id = "Unexpected " + tokenName + ", expect left braket."; break;
case -34: id = "Unexpected " + tokenName + ", expect file end."; break;





// vim:ft=temp cole=2 cocu+=nic ts=8 cuc cul
